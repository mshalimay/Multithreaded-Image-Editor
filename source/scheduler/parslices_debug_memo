package scheduler
import (
	"sync"
	"proj3/png"
	"proj3/utils"
	"proj3/mysync"
	"fmt"
)


func worker(img *png.Image, slice png.ImageSlice, kernels []*png.Kernel, startWG *sync.WaitGroup,
	endWG *sync.WaitGroup, imgWG *sync.WaitGroup, nThreads int, tlock *mysync.TASLock, counter *int) {
	
	for i, kernel := range kernels {
		// signal ready to start effect
		
		// fmt.Println("Thread ", mysync.GetGID(), "called startWG.Done()")
		startWG.Done()
		
		// wait until all are ready
		// fmt.Println("Thread ", mysync.GetGID(), "called startWG.wait()")
		startWG.Wait()

		// apply effect
		// var once1 sync.Once
		//var once2 sync.Once

		img.ApplyEffectSlice2(kernel, slice.YStart, slice.YEnd, slice.XStart, slice.XEnd,i)

		// signal effect application complete
		// fmt.Println("Thread ", mysync.GetGID(), "called endWG.done()")

		// reinitialize end wait group
		mysync.ExecuteOne(counter, tlock, nThreads, func() {
			// fmt.Println("Thread ", mysync.GetGID(), "called img.Final = 1 - img.Final")
			endWG.Add(nThreads)
		})
		endWG.Done()		
		
		// wait until all are done with effect before starting next one
		// fmt.Println("Thread ", mysync.GetGID(), "called endWG.wait()")
		endWG.Wait()

		// reinitialize start wait group
		mysync.ExecuteOne(counter, tlock, nThreads, func() {
			// fmt.Println("Thread ", mysync.GetGID(), "called img.Final = 1 - img.Final")
			img.Final = 1 - img.Final

			// reinitialize wait groups
			// fmt.Println("Thread ", mysync.GetGID(), "reinitialized start wait group to ", nThreads)
			startWG.Add(nThreads)
		})
	}
	imgWG.Done()
}

func RunParallelSlices2(config Config) {
	// create a queue of tasks given data directories CMD inputs and effects.txt file
	taskQueue := utils.CreateTasks(config.DataDirs)
	
	// compute number of threads to use
	nThreads := config.ThreadCount
	if nThreads > len(taskQueue.Tasks){
		nThreads = len(taskQueue.Tasks)
	}

	// load each image from the queue, separate into slices, deploy go routines to apply effects to each slice
	for i := 0; i < len(taskQueue.Tasks); i++ {
		// load the image
		img, _ := png.Load(taskQueue.Tasks[i].InPath)
		
		// create image slices
		slices := SlicesByRow(img, nThreads)
		
		// create a sice of kernels representing each effect to be acccessed by all threads
		kernels := png.CreateKernels(taskQueue.Tasks[i].Effects)

		// use a wait group to synchronize the start of each effect application
		var startWG sync.WaitGroup

		// use a separate wait group to wait for all workers to finish
		var endWG sync.WaitGroup

		tlock := mysync.NewTasLock()
		counter := 0
		startWG.Add(nThreads)
		imgWG := sync.WaitGroup{}

		// fmt.Println("Executing figure ", i)
		// start the workers
		for _, slice := range slices {
			imgWG.Add(1)
			go  worker(img, slice, kernels, &startWG, &endWG, &imgWG, nThreads, &tlock, &counter)
		}

		// wait for all workers to finish
		// fmt.Println("Thread ", mysync.GetGID(), "called imgWG.wait()")
		imgWG.Wait()

		// save the result
		img.Save(taskQueue.Tasks[i].OutPath)
	}
}


func PrintNothing(){
	fmt.Println("nothing")
}







package scheduler
import (
	"sync"
	"proj3/png"
	"proj3/utils"
	"proj3/mysync"
	"fmt"
	"time"
)

// Apply all effects in 'kernels to a slice of 'img'.
// 'worker'  waits for other workers to finish the application of an effect before proceeding to the next effect.
func worker(img *png.Image, slice ImageSlice, kernels []*png.Kernel, effectWG *sync.WaitGroup,
	 startWG *sync.WaitGroup, imgWG *sync.WaitGroup, nWorkers int, tLock1 *mysync.TASLock, tLock2 *mysync.TASLock, counter1 *int, counter2 *int) {

	// loop: apply each effect in 'kernels' to the image slice
	for _, kernel := range kernels {
		
		// signal ready to start effect
		// fmt.Println("Thread ", mysync.GetGID(), "called startWG.Done()")
		startWG.Done()

		// wait until all are ready
		// fmt.Println("Thread ", mysync.GetGID(), "called startWG.wait()")
		startWG.Wait()
		
		// apply effect
		// fmt.Println("Thread ", mysync.GetGID(), "applied effect", i)
		img.ApplyEffectSlice2(kernel, slice.YStart, slice.YEnd, slice.XStart, slice.XEnd)

		// set waitGroup counter to 'nWorkers' for effects synchronization.
		// obs: only one worker will execute this in each iteration
		mysync.ExecuteOne(counter1, tLock1, nWorkers, func() {
			effectWG.Add(nWorkers)
		})

		// signal effect application complete
		effectWG.Done()		
		
		// wait until all threads are done with their slices before applying next effect
		effectWG.Wait()

		// updates image buffer containing to apply the next effect (see png.Image struct definition)
		mysync.ExecuteOne(counter2, tLock2, nWorkers, func() {
			img.Final = 1 - img.Final
			// fmt.Println("Thread ", mysync.GetGID(), "reset start wait group")
			startWG.Add(nWorkers)
		})
	}
	// signal slice processing complete
	imgWG.Done()
}


//=============================================================================
// this version wokrs but perhaps too many sync overhead
//=============================================================================

// Process images specified by 'config' and 'effects.txt' dividing them into slices 
// and deploying 'config.ThreadCount' goroutines to apply effects to each slice. 
// Obs: Each image is loaded, processed and saved at a time.
func RunParallelSlices2(config Config) {
	//start timer
	startTime := time.Now()

	// create a queue of tasks given data directories CMD inputs and effects.txt file
	taskQueue := utils.CreateTasks(config.DataDirs)
	
	// compute number of threads to use
	nThreads := config.ThreadCount
	if nThreads > len(taskQueue.Tasks){
		nThreads = len(taskQueue.Tasks)
	}

	// Definition of elements used for syncronization:
	// imgWG waits until all threads are done with their slices of an image before proceeding to next image
	var imgWG sync.WaitGroup
	
	// auxiliar lock and counter to synchronize application of each effect by each goroutine
	tLock1 := mysync.NewTasLock()
	tLock2 := mysync.NewTasLock()

	// counters to synchronize application of each effect by each goroutine
	counter1 := 0
	counter2 := 0

	// placeholder for cumulative time of parallel tasks
	var totalParallelTime time.Duration

	// loop: load image from queue, divide into slices, deploy go routines to process each slice
	for i := 0; i < len(taskQueue.Tasks); i++ {
		// load the image
		img, _ := png.Load(taskQueue.Tasks[i].InPath)
		
		// create image slices
		slices := SlicesByRow(img, nThreads)
		
		// create slice of kernels representing each effect to be accessed by all threads
		kernels := png.CreateKernels(taskQueue.Tasks[i].Effects)
		
		// start timer for parallel section
		startParallel := time.Now()

		// effectWG helps synchronize application of each effect by each goroutine
		var effectWG sync.WaitGroup
		counter1 = 0
		counter2 = 0

		// use a wait group to synchronize the start of each effect application
		var startWG sync.WaitGroup
		startWG.Add(nThreads)

		// spawn a worker to process each slice 
		for _, slice := range slices {
			imgWG.Add(1)
			go  worker(img, slice, kernels, &effectWG, &startWG, &imgWG, nThreads, &tLock1, &tLock2, &counter1, &counter2)
		}
		// wait for all workers to finish their slices
		imgWG.Wait()

		// compute elapsed time for parallel section and accumulate
		totalParallelTime += time.Since(startParallel)
		
		// save processed image
		img.Save(taskQueue.Tasks[i].OutPath)
	}

	// compute total elapsed time
	elapsedTime := time.Since(startTime)

	// write result into JSON format 
	writeStr := fmt.Sprintf("{\"mode\": \"%s\", \"threads\": %d, \"timeElapsed\": %f, \"timeParallel\": %f , \"datadir\": \"%s\"}\n", 
								config.Mode ,nThreads, elapsedTime.Seconds(), totalParallelTime.Seconds(), config.DataDirs)
	// write elapsed time to a text file
	utils.WriteToFile(resultsPath, writeStr)

}
